let t=Math.random();const e=(t,e)=>t.getAttribute(e),s=["rows","columns","areas"],l=l=>{if(0===s.filter((t=>{return!((s=e(l,t))&&""!==s);var s})).length){let n=((e="")=>(e+t++).replace(".",""))("g_"),[i,a,c]=s.map((t=>e(l,t).trim().replace(/\s\s+/g," "))),[r,o,d]=[i,a,c].map((t=>t.split(" ").length));if(d===r*o){let t=((t,e,s,l)=>{let n=(i=s.split(" "),a=e,Array.from({length:i.length/a},((t,e)=>i.slice(e*a,e*a+a))));var i,a;let c=[];for(let t=0;t<n.length;t++)c.push(`'${n[t].map((t=>"."===t?t:l+t)).join(" ")}'`);return c.join(" ")})(0,o,c,n),e=[i,a,t];s.forEach(((t,s)=>l.style["grid-template-"+t]=e[s]));let r=[...new Set(c.split(" "))].sort().filter((t=>"."!==t));for(let t=0,e=l.children.length;t<e;t++)l.children[t].style.gridArea=n+r[t]}}};customElements.define("grid-it",class extends HTMLElement{static get observedAttributes(){return s}attributeChangedCallback(){l(this)}connectedCallback(){this.style.display="grid"}}),customElements.define("center-it",class extends HTMLElement{connectedCallback(){this.style.display="flex",this.style.justifyContent="center",this.style.alignItems="center"}}),customElements.define("isolate-it",class extends HTMLElement{connectedCallback(){this.style.marginLeft="auto",this.style.marginRight="auto"}}),customElements.define("row-it",class extends HTMLElement{static get observedAttributes(){return["justify-content","align-items"]}attributeChangedCallback(t,e,s){this.style[t]=s}connectedCallback(){this.style.display="flex",this.style.flexDirection="row"}}),customElements.define("column-it",class extends HTMLElement{static get observedAttributes(){return["justify-content","align-items"]}attributeChangedCallback(t,e,s){this.style[t]=s}connectedCallback(){this.style.display="flex",this.style.flexDirection="column"}});const n={P100:()=>({height:"100%",width:"100%"}),V100:()=>({height:"100vh",width:"100vw"}),"center-it":()=>({display:"flex","justify-content":"center","align-items":"center"})};customElements.define("style-it",class extends HTMLElement{connectedCallback(){this.getAttributeNames().forEach((t=>{t in n?(this.style[t]=Object.entries(n[t](this.getAttribute(t))).forEach((([t,e])=>this.style[t]=e)),console.log("cust",t)):t in this.style&&(this.style[t]=this.getAttribute(t))}))}}),function(t){const e="string"==typeof t?[t]:[t[0]];for(let s=1,{length:l}=arguments;s<l;s++)e.push(arguments[s],t[s]);const s=document.createElement("style");s.type="text/css",s.appendChild(document.createTextNode(e.join(""))),document.head.appendChild(s)}("\nhtml, *, *:before, *:after {\n      box-sizing: border-box;\n      margin:0;\n      padding:0;\n}");
