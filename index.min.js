let e=Math.random();const t=(e,t)=>e.getAttribute(t),n=["rows","columns","areas"],l=l=>{if(0===n.filter((e=>{return!((n=t(l,e))&&""!==n);var n})).length){let s=((t="")=>(t+e++).replace(".",""))("g_"),[r,i,a]=n.map((e=>t(l,e).trim().replace(/\s\s+/g," "))),[c,o,d]=[r,i,a].map((e=>e.split(" ").length));if(d===c*o){let e=((e,t,n,l)=>{let s=(r=n.split(" "),i=t,Array.from({length:r.length/i},((e,t)=>r.slice(t*i,t*i+i))));var r,i;let a=[];for(let e=0;e<s.length;e++)a.push(`'${s[e].map((e=>"."===e?e:l+e)).join(" ")}'`);return a.join(" ")})(0,o,a,s),t=[r,i,e];n.forEach(((e,n)=>l.style["grid-template-"+e]=t[n]));let c=[...new Set(a.split(" "))].sort().filter((e=>"."!==e));for(let e=0,t=l.children.length;e<t;e++)l.children[e].style.gridArea=s+c[e]}}};customElements.define("grid-it",class extends HTMLElement{static get observedAttributes(){return n}attributeChangedCallback(){l(this)}connectedCallback(){this.style.display="grid"}}),customElements.define("center-it",class extends HTMLElement{connectedCallback(){this.style.display="flex",this.style.justifyContent="center",this.style.alignItems="center"}}),function(e){const t="string"==typeof e?[e]:[e[0]];for(let n=1,{length:l}=arguments;n<l;n++)t.push(arguments[n],e[n]);const n=document.createElement("style");n.type="text/css",n.appendChild(document.createTextNode(t.join(""))),document.head.appendChild(n)}("\nhtml, *, *:before, *:after {\n      box-sizing: border-box;\n      margin:0;\n      padding:0;\n}");
