let e=Math.random();customElements.define("grid-it",class extends HTMLElement{static get observedAttributes(){return["areas"]}attributeChangedCallback(e,t,n){this.areas=n}connectedCallback(){let t=((t="")=>t+e++)("g_"),n=((e,t)=>{let[n,s,...l]=e.split(" "),i=l.splice(0,n),a=l.splice(0,s),r=(o=l,d=s,Array.from({length:o.length/d},((e,t)=>o.slice(t*d,t*d+d))));var o,d;let c=[];for(let e=0;e<r.length;e++)c.push(`'${r[e].map((e=>t+e)).join(" ")}'`);return[l.length-a.length*i.length==0&&parseInt(n)===i.length&&parseInt(s)===a.length,{gridTemplateRows:i.join(" "),gridTemplateColumns:a.join(" "),gridTemplateAreas:c.join(" ")}]})(this.areas,t);n[0]&&(this.style.display="grid",Object.assign(this.style,n[1]),((e,t,n)=>{let s=[...new Set(e.split(" "))].sort(),l=t.children,i=0;for(let e of l)e.style.gridArea=n+s[i],i++})(n[1].gridTemplateAreas,this,t))}}),customElements.define("center-it",class extends HTMLElement{connectedCallback(){this.style.display="flex",this.style.justifyContent="center",this.style.alignItems="center"}});export default(e="\n    html, body {\n        padding:0;\n        margin:0;\n    }\n    *, *::before, *::after {\n        box-sizing: border-box;\n    }")=>{!function(e){const t="string"==typeof e?[e]:[e[0]];for(let n=1,{length:s}=arguments;n<s;n++)t.push(arguments[n],e[n]);const n=document.createElement("style");n.type="text/css",n.appendChild(document.createTextNode(t.join(""))),document.head.appendChild(n)}(e)};
