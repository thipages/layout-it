let e=Math.random();customElements.define("grid-it",class extends HTMLElement{static get observedAttributes(){return["areas","rows","columns"]}attributeChangedCallback(e,t,n){this.name=n,"rows"!==e&&"columns"!==e||(this.style["grid-area-"+e]=n)}connectedCallback(){console.log("connectedCallback");let t=((t="")=>t+e++)("g_"),n=((e,t,n,s)=>{let l=(i=n,o=t,Array.from({length:i.length/o},((e,t)=>i.slice(t*o,t*o+o))));var i,o;let r=[];for(let e=0;e<l.length;e++)r.push(`'${l[e].map((e=>s+e)).join(" ")}'`);return[r.length===e*t,r.join(" ")]})(this.rows.split(" ").length,this.cols.split(" ").length,this.areas,t);console.log(n),this.style.display="grid",n[0]&&(this.style.gridTemplateAreas=n[1],((e,t,n)=>{let s=[...new Set(e.split(" "))].sort(),l=t.children,i=0;for(let e of l)e.style.gridArea=n+s[i],i++})(n[1],this,t))}}),customElements.define("center-it",class extends HTMLElement{connectedCallback(){this.style.display="flex",this.style.justifyContent="center",this.style.alignItems="center"}});export default(e="\n    html, body {\n        padding:0;\n        margin:0;\n    }\n    *, *::before, *::after {\n        box-sizing: border-box;\n    }")=>{!function(e){const t="string"==typeof e?[e]:[e[0]];for(let n=1,{length:s}=arguments;n<s;n++)t.push(arguments[n],e[n]);const n=document.createElement("style");n.type="text/css",n.appendChild(document.createTextNode(t.join(""))),document.head.appendChild(n)}(e)};
